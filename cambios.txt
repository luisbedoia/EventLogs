diff --git a/src/application/index.ts b/src/application/index.ts
new file mode 100644
index 0000000..559426c
--- /dev/null
+++ b/src/application/index.ts
@@ -0,0 +1,69 @@
+import { EventLog } from "../domain";
+
+export interface EventLogRepository {
+  create(eventLog: EventLog): Promise<void>;
+  get(id: string): Promise<EventLog>;
+  filter(
+    filter: Filter,
+    page: number,
+    limit: number
+  ): Promise<EventLogPagination>;
+}
+
+export interface QueueService {
+  enqueue(eventLog: EventLog): Promise<void>;
+}
+
+export interface Filter {
+  type?: string;
+  timeRange?: {
+    from: Date;
+    to: Date;
+  };
+}
+
+export interface EventLogPagination {
+  page: number;
+  total: number;
+  data: EventLog[];
+}
+
+export class EnqueueEventLogUseCase {
+  constructor(private queueService: QueueService) {}
+
+  async execute(eventLog: EventLog): Promise<void> {
+    await this.queueService.enqueue(eventLog);
+  }
+}
+
+export class CreateEventLogUseCase {
+  constructor(private eventLogRepository: EventLogRepository) {}
+
+  async execute(eventLog: EventLog): Promise<void> {
+    return this.eventLogRepository.create(eventLog);
+  }
+}
+
+export class GetEventLogUseCase {
+  constructor(
+    private readonly id: string,
+    private eventLogRepository: EventLogRepository
+  ) {}
+
+  async execute(): Promise<EventLog> {
+    return this.eventLogRepository.get(this.id);
+  }
+}
+
+export class FilterEventLogUseCase {
+  constructor(
+    private readonly eventLogRepository: EventLogRepository,
+    private readonly filter: Filter,
+    private readonly page: number,
+    private readonly limit: number
+  ) {}
+
+  async execute(): Promise<EventLogPagination> {
+    return this.eventLogRepository.filter(this.filter, this.page, this.limit);
+  }
+}
diff --git a/src/domain/index.ts b/src/domain/index.ts
new file mode 100644
index 0000000..9f59d62
--- /dev/null
+++ b/src/domain/index.ts
@@ -0,0 +1,24 @@
+export enum EventType {
+  FORM = "FORM",
+  API = "API",
+}
+
+export interface EventLog {
+  id?: number;
+  type: EventType;
+  description: string;
+  eventDate: Date;
+}
+
+export class EventLogError extends Error {
+  constructor(message: string, name: string) {
+    super(message);
+    this.name = name;
+  }
+}
+
+export class NotFoundError extends EventLogError {
+  constructor(message: string) {
+    super(message, "NotFoundError");
+  }
+}
diff --git a/src/index.ts b/src/index.ts
new file mode 100644
index 0000000..7c7cfa2
--- /dev/null
+++ b/src/index.ts
@@ -0,0 +1,29 @@
+import express from "express";
+import {
+  createEventController,
+  getEventLogController,
+  filterEventLogController,
+} from "./presentation/controllers";
+import {
+  createEventValidator,
+  filterEventLogValidator,
+  getEventLogValidator,
+} from "./presentation/validators";
+import { errorMiddleware, loggerMiddleware } from "./presentation/middlewares";
+import { initRabbitConsumers } from "./infrastructure/rabbitConsumers";
+
+const app = express();
+app.use(express.json());
+app.use(express.urlencoded({ extended: true }));
+
+app.use(loggerMiddleware);
+app.post("/events", createEventValidator, createEventController);
+app.get("/events/:id", getEventLogValidator, getEventLogController);
+app.get("/events", filterEventLogValidator, filterEventLogController);
+
+app.use(errorMiddleware);
+
+app.listen(3000, () => {
+  console.log("Server running at http://localhost:3000");
+  initRabbitConsumers();
+});
diff --git a/src/infrastructure/index.ts b/src/infrastructure/index.ts
new file mode 100644
index 0000000..9ea0e6b
--- /dev/null
+++ b/src/infrastructure/index.ts
@@ -0,0 +1,147 @@
+import { Pool } from "pg";
+import {
+  EventLogPagination,
+  EventLogRepository,
+  Filter,
+  QueueService,
+} from "../application";
+import { EventLog, NotFoundError } from "../domain";
+import { Connection, Publisher, PublisherProps } from "rabbitmq-client";
+import { logger } from "../utils/logger";
+
+export class RabbitQueueService implements QueueService {
+  private readonly queue = "event-logs";
+  private readonly routingKey = "event.logs";
+  private readonly exchange = "registration";
+  private readonly publisherProps: PublisherProps = {
+    confirm: true,
+    maxAttempts: 3,
+    exchanges: [{ exchange: this.exchange, type: "topic" }],
+    queues: [{ queue: this.queue }],
+    queueBindings: [
+      {
+        exchange: this.exchange,
+        queue: this.queue,
+        routingKey: this.routingKey,
+      },
+    ],
+  };
+  private readonly publisher: Publisher;
+
+  constructor(rabbit: Connection) {
+    try {
+      this.publisher = rabbit.createPublisher(this.publisherProps);
+    } catch (error) {
+      logger.error(error);
+      throw error;
+    }
+  }
+
+  async enqueue(event: EventLog): Promise<void> {
+    try {
+      await this.publisher.send(this.queue, event);
+    } catch (error) {
+      logger.error(error);
+      throw error;
+    }
+  }
+}
+
+export class PostgresEventLogRepository implements EventLogRepository {
+  private readonly pool: Pool;
+
+  constructor(pool: Pool) {
+    this.pool = pool;
+  }
+
+  async create(event: EventLog): Promise<void> {
+    try {
+      const query = {
+        text: "INSERT INTO registration.event_logs (type, description, event_date) VALUES ($1, $2, $3) RETURNING *",
+        values: [event.type, event.description, event.eventDate],
+      };
+
+      await this.pool.query(query);
+    } catch (error) {
+      logger.error(error);
+      throw error;
+    }
+  }
+
+  async get(id: string): Promise<EventLog> {
+    try {
+      const query = {
+        text: "SELECT * FROM registration.event_logs WHERE id = $1",
+        values: [id],
+      };
+
+      const { rows, rowCount } = await this.pool.query(query);
+
+      if (rowCount === 0) {
+        throw new NotFoundError("Event not found: id=" + id);
+      }
+
+      const result: EventLog = {
+        id: rows[0].id,
+        type: rows[0].type,
+        description: rows[0].description,
+        eventDate: rows[0].event_date,
+      };
+
+      return result;
+    } catch (error) {
+      logger.error(error);
+      throw error;
+    }
+  }
+
+  async filter(
+    filter: Filter,
+    page: number,
+    limit: number
+  ): Promise<EventLogPagination> {
+    try {
+      const typeQuery = filter.type
+        ? `type='${filter.type}'`
+        : "type IS NOT NULL";
+      const timeRangeQuery = filter.timeRange
+        ? `AND event_date BETWEEN '${filter.timeRange.from.toISOString()}' AND '${filter.timeRange.to.toISOString()}'`
+        : "";
+      const limitQuery = `limit ${limit}`;
+      const offsetQuery = `offset ${(page - 1) * limit}`;
+      const sortQuery = "ORDER BY event_date ASC";
+
+      const query = {
+        text: `SELECT * FROM registration.event_logs WHERE ${typeQuery} ${timeRangeQuery} ${sortQuery} ${limitQuery} ${offsetQuery}`,
+        values: [],
+      };
+
+      const totalQuery = {
+        text: `SELECT COUNT(*) FROM registration.event_logs WHERE ${typeQuery} ${timeRangeQuery}`,
+        values: [],
+      };
+
+      const { rows } = await this.pool.query(query);
+
+      const { rows: totalRows } = await this.pool.query(totalQuery);
+
+      const result: EventLog[] = rows.map((row) => {
+        return {
+          id: row.id,
+          type: row.type,
+          description: row.description,
+          eventDate: row.event_date,
+        };
+      });
+
+      return {
+        page,
+        total: Math.ceil(totalRows[0].count / limit),
+        data: result,
+      };
+    } catch (error) {
+      logger.error(error);
+      throw error;
+    }
+  }
+}
diff --git a/src/infrastructure/postgres.ts b/src/infrastructure/postgres.ts
new file mode 100644
index 0000000..0c4778a
--- /dev/null
+++ b/src/infrastructure/postgres.ts
@@ -0,0 +1,17 @@
+import { PoolConfig, Pool } from "pg";
+import { logger } from "../utils/logger";
+
+const poolConfig: PoolConfig = {
+  user: "admin",
+  host: "localhost",
+  database: "admin",
+  password: "admin",
+  port: 5432,
+};
+
+export const pool = new Pool(poolConfig);
+
+pool.on("error", (err) => {
+  logger.error("Postgres connection error", err);
+});
+
diff --git a/src/infrastructure/rabbit.ts b/src/infrastructure/rabbit.ts
new file mode 100644
index 0000000..0e8a9b3
--- /dev/null
+++ b/src/infrastructure/rabbit.ts
@@ -0,0 +1,10 @@
+import { Connection } from "rabbitmq-client";
+import { logger } from "../utils/logger";
+
+export const rabbit = new Connection("amqp://admin:admin@localhost:5672");
+
+rabbit.on("error", (err) => {
+  logger.error("RabbitMQ connection error", err);
+});
+
+
diff --git a/src/infrastructure/rabbitConsumers.ts b/src/infrastructure/rabbitConsumers.ts
new file mode 100644
index 0000000..16b79a2
--- /dev/null
+++ b/src/infrastructure/rabbitConsumers.ts
@@ -0,0 +1,18 @@
+import { createEventLogListener } from "../presentation/listeners";
+import { logger } from "../utils/logger";
+import { rabbit } from "./rabbit";
+
+export const initRabbitConsumers = async () => {
+  try {
+    rabbit.createConsumer(
+      {
+        queue: "event-logs",
+      },
+      async (message) => {
+        await createEventLogListener(message);
+      }
+    );
+  } catch (error) {
+    logger.error(error);
+  }
+};
diff --git a/src/presentation/controllers.ts b/src/presentation/controllers.ts
new file mode 100644
index 0000000..7ffef20
--- /dev/null
+++ b/src/presentation/controllers.ts
@@ -0,0 +1,134 @@
+import { NextFunction, Request, Response } from "express";
+import { EventLog, EventType } from "../domain";
+import {
+  EnqueueEventLogUseCase,
+  FilterEventLogUseCase,
+  GetEventLogUseCase,
+} from "../application";
+import {
+  PostgresEventLogRepository,
+  RabbitQueueService,
+} from "../infrastructure";
+import { rabbit } from "../infrastructure/rabbit";
+import { pool } from "../infrastructure/postgres";
+
+const jsonEventController = async (
+  req: Request,
+  res: Response,
+  next: NextFunction
+) => {
+  try {
+    const description = req.body.description;
+
+    const eventDate = new Date();
+    const eventLog: EventLog = {
+      type: EventType.API,
+      description,
+      eventDate,
+    };
+
+    const queueService = new RabbitQueueService(rabbit);
+    const enqueueEventLogUseCase = new EnqueueEventLogUseCase(queueService);
+    await enqueueEventLogUseCase.execute(eventLog);
+
+    res.json({ message: "Event Successfully Enqueued" });
+  } catch (error) {
+    next(error);
+  }
+};
+
+const formEventController = async (
+  req: Request,
+  res: Response,
+  next: NextFunction
+) => {
+  try {
+    const description = req.body.description;
+    const eventDate = new Date();
+    const eventLog: EventLog = {
+      type: EventType.FORM,
+      description,
+      eventDate,
+    };
+
+    const queueService = new RabbitQueueService(rabbit);
+    const enqueueEventLogUseCase = new EnqueueEventLogUseCase(queueService);
+    await enqueueEventLogUseCase.execute(eventLog);
+
+    res.json({ message: "Event Successfully Enqueued" });
+  } catch (error) {
+    next(error);
+  }
+};
+
+export const createEventController = (
+  req: Request,
+  res: Response,
+  next: NextFunction
+) => {
+  const requestType = req.get("Content-Type");
+
+  switch (requestType) {
+    case "application/json":
+      jsonEventController(req, res, next);
+      break;
+    case "application/x-www-form-urlencoded":
+      formEventController(req, res, next);
+      break;
+    default:
+      res.status(400).json({ error: "Format not supported" });
+      break;
+  }
+};
+
+export const getEventLogController = async (
+  req: Request,
+  res: Response,
+  next: NextFunction
+) => {
+  try {
+    const id = req.params.id;
+
+    const eventLogRepository = new PostgresEventLogRepository(pool);
+    const useCase = new GetEventLogUseCase(id, eventLogRepository);
+    const event = await useCase.execute();
+
+    res.json(event);
+  } catch (error) {
+    next(error);
+  }
+};
+
+export const filterEventLogController = async (
+  req: Request,
+  res: Response,
+  next: NextFunction
+) => {
+  try {
+    const type = req.query.type as string;
+    let timeRange = undefined;
+    if (req.query.from && req.query.to) {
+      const from = req.query.from as string;
+      const to = req.query.to as string;
+      timeRange = {
+        from: new Date(from),
+        to: new Date(to),
+      };
+    }
+    const page = req.query.page ? Number(req.query.page) : 1;
+    const limit = req.query.limit ? Number(req.query.limit) : 10;
+
+    const eventLogRepository = new PostgresEventLogRepository(pool);
+    const useCase = new FilterEventLogUseCase(
+      eventLogRepository,
+      { type, timeRange },
+      page,
+      limit
+    );
+    const event = await useCase.execute();
+
+    res.json(event);
+  } catch (error) {
+    next(error);
+  }
+};
diff --git a/src/presentation/listeners.ts b/src/presentation/listeners.ts
new file mode 100644
index 0000000..57fadbe
--- /dev/null
+++ b/src/presentation/listeners.ts
@@ -0,0 +1,24 @@
+import { AsyncMessage } from "rabbitmq-client";
+import { EventLog } from "../domain";
+import { PostgresEventLogRepository } from "../infrastructure";
+import { pool } from "../infrastructure/postgres";
+import { CreateEventLogUseCase } from "../application";
+import { logger } from "../utils/logger";
+
+export const createEventLogListener = async (message: AsyncMessage) => {
+  try {
+    const { type, description, eventDate } = message.body;
+
+    const event: EventLog = {
+      type,
+      description,
+      eventDate,
+    };
+
+    const eventLogRepository = new PostgresEventLogRepository(pool);
+    const useCase = new CreateEventLogUseCase(eventLogRepository);
+    await useCase.execute(event);
+  } catch (error) {
+    logger.error(error);
+  }
+};
diff --git a/src/presentation/middlewares.ts b/src/presentation/middlewares.ts
new file mode 100644
index 0000000..417eb28
--- /dev/null
+++ b/src/presentation/middlewares.ts
@@ -0,0 +1,31 @@
+import { Request, Response, NextFunction } from "express";
+import { EventLogError, NotFoundError } from "../domain";
+import { validationResult } from "express-validator";
+import morgan from "morgan";
+
+export const errorMiddleware = (
+  error: EventLogError,
+  req: Request,
+  res: Response,
+  next: NextFunction
+) => {
+  if (error instanceof NotFoundError) {
+    res.status(404).json({
+      message: error.message,
+    });
+    return;
+  }
+
+  res.status(500).json({ error: "Internal Server Error" });
+};
+
+export const validationErrorMiddleware = (req: Request, res: Response, next: NextFunction) => {
+  const errors = validationResult(req);
+  if (errors.isEmpty()) {
+    next();
+  } else {
+    res.status(400).json({ code: "Validation Failed", data: errors.array() });
+  }
+};
+
+export const loggerMiddleware = morgan(':method :url :status :res[content-length] - :response-time ms');
diff --git a/src/presentation/validators.ts b/src/presentation/validators.ts
new file mode 100644
index 0000000..9adabff
--- /dev/null
+++ b/src/presentation/validators.ts
@@ -0,0 +1,36 @@
+import { query, body, param } from "express-validator";
+import { validationErrorMiddleware } from "./middlewares";
+import { EventType } from "../domain";
+
+export const filterEventLogValidator = [
+  query("type")
+    .optional()
+    .isString()
+    .toUpperCase()
+    .isIn(Object.values(EventType)),
+  query("from").custom((value, { req }) => {
+    if (req?.query?.from && !req.query.to) {
+      throw new Error("from and to must be provided together");
+    }
+    return true;
+  }),
+  query("to").custom((value, { req }) => {
+    if (req?.query?.to && !req.query.from) {
+      throw new Error("from and to must be provided together");
+    }
+    return true;
+  }),
+  query("from").optional().isISO8601().toDate(),
+  query("to").optional().isISO8601().toDate(),
+  validationErrorMiddleware,
+];
+
+export const createEventValidator = [
+  body("description").isString(),
+  validationErrorMiddleware,
+];
+
+export const getEventLogValidator = [
+  param("id").isNumeric(),
+  validationErrorMiddleware,
+];
diff --git a/src/utils/logger.ts b/src/utils/logger.ts
new file mode 100644
index 0000000..3946fab
--- /dev/null
+++ b/src/utils/logger.ts
@@ -0,0 +1,7 @@
+import winston from "winston";
+
+export const logger = winston.createLogger({
+  level: "info",
+  format: winston.format.json(),
+  transports: [new winston.transports.Console()],
+});
